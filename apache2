#! /bin/bash

### BEGIN INIT INFO
# Provides:          apache2
# Required-Start:    $local_fs $network $named $remote_fs $syslog
# Required-Stop:     $local_fs $network $named $remote_fs $syslog
# Should-Start:      $network $named
# Should-Stop:       $network $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: apache http server daemon
# Description:       The Apache HTTP Server is a web server application notable for playing a key role in the initial growth of the World Wide Web.
### END INIT INFO

PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:~/bin
export PATH

if [ "$(id -u)" != "0" ]; then
    echo -e "\033[1;31m[E]\033[0m  You must have root permissions for run this script, please use sudo and try again."
    exit 3
fi

### Maybe you need to change these.
name=httpd
### The recommended method of invoking the httpd executable is to use the apachectl control script.
### In the most cases, the binary file of programs are in `/usr/bin` or `/usr/local/bin`.
### Try use `which $name` to find the full path, or just use `apachectl` if it in `$PATH`.
bin=/usr/local/apache2/bin/apachectl
### In the most cases, the configuration file of programs are in `/etc`. You can create your own configuration file and edit this to the new path.
config=/home/www/etc/apache2/$name.conf
### By default, the pid file of programs are in `/var/run`. So you don't need to edit this.
### But pay attention to `$name`, it may be different. You can find the path in the configuration file.
pidFile=/var/run/$name.pid

getPid() {
    ### Delete spaces, tabs and newlines.
    pid=$(cat $pidFile 2>/dev/null | tr -d ' \t\n')
    ### `$pidFile` may be blank. If the progress exists, `! kill -0 $pid 2>/dev/null` returns 1.
    if [ ! "$pid" ] || ! kill -0 $pid 2>/dev/null; then
        rm -f $pidFile
        unset pid
    fi
}

### Successfully start the application if the progress exists after 5 seconds.
doStart() {
    echo -en "\033[1;36m[I]\033[0m  Starting $name"
    ### apachectl is a script for running httpd, so we can't use its pid.
    $bin -f "$config" > /dev/null 2>&1 &

    getPid
    for (( i=0; i<=5; i++ )); do
        if kill -0 $pid 2>/dev/null; then
            echo -n '.'
            sleep 1
        else
            echo -e "\n\033[1;31m[E]\033[0m  Start $name failed."
            exit 1
        fi
    done
    echo -e "\n\033[1;32m[N]\033[0m  Start $name succeeded."
}

### Successfully stop the application if the progress doesn't exists in 10 seconds.
doStop() {
    echo -en "\033[1;36m[I]\033[0m  Gracefully stopping $name"
    kill -WINCH $pid

    for (( i=0; i<=10; i++ )); do
        if kill -0 $pid 2>/dev/null; then
            if [ "$i" = "10" ]; then
                echo -e "\n\033[1;31m[E]\033[0m  Stop $name failed. Try using $0 kill."
                exit 1
            fi
            echo -n '.'
            sleep 1
        else
            ### Just for restart.
            unset pid
            echo -e "\n\033[1;32m[N]\033[0m  Stop $name succeeded."
            break
        fi
    done
}

case "$1" in
    start)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;33m[W]\033[0m  $name already running. pid = $pid"
        exit 2
    else
        doStart
    fi
    ;;

    stop)
    getPid
    if [ "$pid" ]; then
        doStop
    else
        echo -e "\033[1;33m[W]\033[0m  $name not running."
        exit 2
    fi
    ;;

    kill)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;36m[I]\033[0m  Fast Shutdown $name..."
        kill -TERM $pid
        echo -e "\033[1;32m[N]\033[0m  Shutdown $name Done."
    else
        echo -e "\033[1;33m[W]\033[0m  $name not running."
        exit 2
    fi
    ;;

    reload)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;36m[I]\033[0m  Reloading $name configuration file..."
        kill -USR1 $pid
        echo 'Done.'
    else
        echo -e "\033[1;33m[W]\033[0m  $name not running"
        doStart
    fi
    ;;

    restart)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;36m[I]\033[0m  Restarting $name: "
        doStop
        doStart
    else
        echo -e "\033[1;33m[W]\033[0m  $name not running"
        doStart
    fi
    ;;

    status)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;32m[N]\033[0m  $name is running. pid = $pid"
    else
        echo -e "\033[1;32m[N]\033[0m  $name not running."
    fi
    ;;

    *)
    script=$(basename "$0")
    echo "Usage: [sudo] $script {start|stop|kill|reload|restart|status}." >&2
    exit 3
    ;;
esac

exit 0
