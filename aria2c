#! /bin/bash

### BEGIN INIT INFO
# Provides:          aria2c
# Required-Start:    $local_fs $network $named $remote_fs $syslog
# Required-Stop:     $local_fs $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: aria2 daemon
# Description:       aria2 is a lightweight multi-protocol & multi-source command-line download utility.
### END INIT INFO

PATH=~/sbin:/usr/local/sbin:/usr/sbin:/sbin:~/bin:/usr/local/bin:/usr/bin:/bin
export PATH

if [ "$(id -u)" != "0" ]; then
    echo -e "\033[1;31m[E]\033[0m  You must have root permissions for run this script, please use sudo and try again." >&2
    exit 4
fi

###############################################################
########## Maybe you need to modify these variables. ##########

name=aria2c

### In the most cases, the binary file of programs are in `/usr/bin` or `/usr/local/bin`.
### Try using `which $name` to find the full path, or just use `$name` if the binary file is in `$PATH`.
bin=/usr/bin/$name
if [ ! -x "$bin" ]; then
    echo -e "\033[1;31m[E]\033[0m  Can not find $bin, maybe the program isn't installed." >&2
    exit 5
fi

### In the most cases, the configuration file of programs are in `/etc`. You can create your own configuration file and edit this variable to the new path.
config=/etc/aria2.conf
if [ ! -r "$config" ]; then
    echo -e "\033[1;31m[E]\033[0m  The configuration file isn't found, maybe the path ($config) is wrong." >&2
    exit 6
fi

### In the most cases, the log file of programs are in `/var/log`. You can find the path in the configuration file.
log=/var/log/aria2.log

### By default, the pid file of programs are in `/var/run`. So you don't need to edit this variable.
pidFile=/var/run/$name.pid

##########                                           ##########
###############################################################

script=$(basename "$0")

getPid() {
    ### Delete spaces, tabs and newlines.
    pid=$(cat $pidFile 2>/dev/null | tr -d ' \t\n')
    ### `$pidFile` may be blank. If the process exists, `! kill -0 $pid 2>/dev/null` will return 1.
    if [ -z "$pid" ] || ! kill -0 $pid 2>/dev/null; then
        rm -f $pidFile
        unset pid
    fi
}

### Modify these variables to your own path.
dlDir=/media/Files/Downloads
sessionFile=$dlDir/aria2.session

### Modify 'pi' to your own username.
checkDlDir() {
    if [ ! -d "$dlDir" ]; then
        mkdir -p "$dlDir"
    fi
    if [ ! -w "$sessionFile" ]; then
        touch "$sessionFile"
    fi
    chown -R pi:pi "$dlDir"
    if [ ! -w "$log" ]; then
        touch "$log"
        chown pi:pi "$log"
    fi
}

doStart() {
    echo -en "\033[1;36m[I]\033[0m  Starting $name"
    ### aria2 doesn't create these files automatically, so we need to create them manually.
    checkDlDir
    ### I don't want it to run as root. aria2 doesn't create a pid file.
    if su pi -s /bin/bash -c "$bin --conf-path='$config'" 2>/dev/null; then
        echo -n '.'
        pid=$(pgrep -f $bin)
        echo -n $pid > $pidFile
    else
        echo -e "\n\033[1;31m[E]\033[0m  Start $name error."
        exit 1
    fi

    ### Successfully start the program if the process exists after 5 seconds.
    for (( i=0; i<=5; i++ )); do
        if kill -0 $pid 2>/dev/null; then
            echo -n '.'
            sleep 1
        else
            rm -f $pidFile
            echo -e "\n\033[1;31m[E]\033[0m  Start $name failed."
            exit 1
        fi
    done
    echo -e "\n\033[1;32m[N]\033[0m  Start $name success."
}

doStop() {
    echo -en "\033[1;36m[I]\033[0m  Stopping $name"
    if kill $pid; then
        echo -n '.'
    else
        echo -e "\n\033[1;31m[E]\033[0m  Stop $name error. Try using $script kill."
        exit 1
    fi

    ### Successfully stop the program if the process doesn't exists in 10 seconds.
    for (( i=0; i<=10; i++ )); do
        if kill -0 $pid 2>/dev/null; then
            echo -n '.'
            sleep 1
        else
            rm -f $pidFile
            ### Just for restart.
            unset pid
            echo -e "\n\033[1;32m[N]\033[0m  Stop $name success."
            return 0
        fi
    done

    echo -e "\n\033[1;31m[E]\033[0m  Stop $name failed. Try using $script kill."
    exit 1
}

case "$1" in
    start)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;33m[W]\033[0m  $name is already running. pid = $pid"
    else
        doStart
    fi
    ;;

    stop)
    getPid
    if [ "$pid" ]; then
        doStop
    else
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
    fi
    ;;

    kill)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;36m[I]\033[0m  Forcefully killing the process of $name..."

        if kill -9 $pid; then
            rm -f $pidFile
            echo -e "\033[1;32m[N]\033[0m  Kill $name done."
        else
            echo -e "\033[1;31m[E]\033[0m  Kill $name error."
            exit 1
        fi
    else
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
    fi
    ;;

    restart)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;36m[I]\033[0m  Restarting $name:"
        doStop
        doStart
    else
        echo -e "\033[1;33m[W]\033[0m  $name isn't running"
        doStart
    fi
    ;;

    force-reload)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;36m[I]\033[0m  Forcefully reloading (restarting) $name:"
        doStop
        doStart
    else
        echo -e "\033[1;31m[E]\033[0m  $name isn't running"
        exit 7
    fi
    ;;

    status)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;32m[N]\033[0m  $name is running. pid = $pid"
    else
        echo -e "\033[1;32m[N]\033[0m  $name isn't running."
        exit 3
    fi
    ;;

    *)
    echo "Usage: [sudo] $script {start|stop|kill|restart|force-reload|force-reload|status}." >&2
    exit 3
    ;;
esac

exit 0
