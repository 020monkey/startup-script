#!/bin/bash

### BEGIN INIT INFO
# Provides:          awstats-cgi
# Required-Start:    $local_fs $network $named $remote_fs $syslog
# Required-Stop:     $local_fs $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: awstats cgi
# Description:       AWStats is a free powerful and featureful tool that generates advanced web, streaming, ftp or mail server statistics, graphically.
### END INIT INFO

PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin
export PATH

if [ $(id -u) -ne 0 ]; then
    echo -e "\033[1;31m[E]\033[0m  You must have root permissions for run this script, please use sudo and try again." >&2
    exit 4
fi

name=awstats-cgi

###############################################################
########## Maybe you need to modify these variables. ##########

### In the most cases, the binary file of program is in `/usr/bin` or `/usr/local/bin`.
### Try using `which spawn-fcgi` and `which fcgiwrap` to find the full path, or just use `spawn-fcgi` and `fcgiwrap` if it is in `$PATH`.
spawnFcgi=/usr/bin/spawn-fcgi
fcgiwrap=/usr/sbin/fcgiwrap
if [ ! -x "$spawnFcgi" ] || [ ! -x "$fcgiwrap" ]; then
    echo -e "\033[1;31m[E]\033[0m  Can not find $spawnFcgi or $fcgiwrap, maybe the program isn't installed." >&2
    exit 5
fi

### By default, the pid file of program is in `/var/run`. So you don't need to edit this variable.
pidFile=/var/run/awstats-cgi.pid

socketFile=/tmp/awstats-cgi.sock
forkChildrenNum=3

##########                                           ##########
###############################################################

script=$(basename "$0")

getPid() {
    unset cgiPids

    i=0
    while read line; do
        line=$(echo -n "$line" | tr -d ' \t\n')

        if [ -z $line ] || ! kill -0 $line 2>/dev/null; then
            continue
        fi

        cgiPids[$i]=$line

        (( i++ ))
    done < <(awk 1 $pidFile 2>/dev/null)

    if [ ${#cgiPids[*]} -eq 0 ]; then
        rm -f $pidFile
    fi
}

doStart() {
    echo -en "\033[1;36m[I]\033[0m  Starting $name."

    if ! $spawnFcgi -F $forkChildrenNum -s $socketFile -u awstats -g awstats -U awstats -G awstats -P $pidFile -- $fcgiwrap -f; then
        echo -e "\n\033[1;31m[E]\033[0m  Start $name error."
        exit 1
    fi
    chmod 666 $socketFile

    getPid

    ### Successfully start the program if the process exists after 5 seconds.
    for (( i=0; i<=5; i++ )); do
        if [ ${#cgiPids[*]} -eq 0 ]; then
            echo -e "\n\033[1;31m[E]\033[0m  Start $name failed."
            exit 1
        fi

        for cgiPid in ${cgiPids[*]}; do
            if ! kill -0 $cgiPid 2>/dev/null; then
                echo -e "\n\033[1;31m[E]\033[0m  Start $name failed."
                exit 1
            fi
        done

        sleep 1
        echo -n '.'
    done

    echo -e "\n\033[1;32m[N]\033[0m  Start $name success."
}

doStop() {
    echo -en "\033[1;36m[I]\033[0m  Stopping $name."

    for cgiPid in ${cgiPids[*]}; do
        if ! kill $cgiPid; then
            echo -e "\n\033[1;31m[E]\033[0m  Stop $name error. Try using $script kill."
            exit 1
        fi
    done

    ### Successfully stop the program if the process doesn't exists in 10 seconds.
    for (( i=0; i<=11; i++ )); do
        sleep 1
        echo -n '.'

        for cgiPid in ${cgiPids[*]}; do
            if kill -0 $cgiPid 2>/dev/null; then
                if [ $i -ge 10 ]; then
                    echo -e "\n\033[1;31m[E]\033[0m  Stop $name failed. Try using $script kill."
                    exit 1
                fi

                continue
            fi
        done

        echo -e "\n\033[1;32m[N]\033[0m  Stop $name success."
        break
    done
}

case "$1" in
    start)
    getPid
    if [ ${#cgiPids[*]} -gt 0 ]; then
        echo -e "\033[1;33m[W]\033[0m  $name is already running, pids are ${cgiPids[*]}."
        exit 0
    fi

    doStart
    ;;

    stop)
    getPid
    if [ ${#cgiPids[*]} -eq 0 ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
        exit 0
    fi

    doStop
    ;;

    kill)
    getPid
    if [ ${#cgiPids[*]} -eq 0 ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
        exit 0
    fi

    echo -e "\033[1;36m[I]\033[0m  Forcefully killing the process of $name..."

    for cgiPid in ${cgiPids[*]}; do
        if ! kill -9 $cgiPid 2>/dev/null; then
            echo -e "\033[1;31m[E]\033[0m  Kill $name failed."
            exit 1
        fi
    done
    rm -f $pidFile

    echo -e "\033[1;32m[N]\033[0m  Kill $name done."
    ;;

    restart)
    getPid
    if [ ${#cgiPids[*]} -eq 0 ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
        doStart
        exit 0
    fi

    echo -e "\033[1;36m[I]\033[0m  Restarting $name:"
    doStop
    doStart
    ;;

    force-reload)
    getPid
    if [ ${#cgiPids[*]} -eq 0 ]; then
        echo -e "\033[1;31m[E]\033[0m  $name isn't running."
        exit 7
    fi

    echo -e "\033[1;36m[I]\033[0m  Forcefully reloading (restarting) $name:"
    doStop
    doStart
    ;;

    status)
    getPid
    if [ ${#cgiPids[*]} -eq 0 ]; then
        echo -e "\033[1;32m[N]\033[0m  $name isn't running."
        exit 3
    fi

    echo -e "\033[1;32m[N]\033[0m  $name is already running, pids are ${cgiPids[*]}."
    ;;

    *)
    echo "Usage: [sudo] $script {start|stop|kill|restart|force-reload|status}." >&2
    exit 3
    ;;
esac

exit 0
