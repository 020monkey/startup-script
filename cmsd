#! /bin/bash

### BEGIN INIT INFO
# Provides:          cmsd
# Required-Start:    $local_fs $network $named $remote_fs $syslog
# Required-Stop:     $local_fs $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: aliyun jiankong agent
# Description:       A server monitor by alibaba.
### END INIT INFO

PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:~/bin
export PATH

if [ "$(id -u)" != "0" ]; then
    echo -e "\033[1;31m[E]\033[0m  You must have root permissions for run this script, please use sudo and try again." >&2
    exit 4
fi

### Maybe you need to modify these variables.
name=cmsd
### In the most cases, the binary file of programs are in `/usr/bin` or `/usr/local/bin`.
### Try use `which $name` to find the full path, or just use `$name` if it is in `$PATH`.
bin=/usr/local/cms/bin/agent_cms
### In the most cases, the configuration file of programs are in `/etc`. You can create your own configuration file and edit this variable to the new path.
config=/usr/local/cms/config/token.cfg
token=$(grep 'AGENT_TOKEN' $config | tr -d ' \t' | awk -F= '{print $2}' 2>/dev/null)
### By default, the pid file of programs are in `/var/run`. So you don't need to edit this variable.
pidFile=/var/run/$name.pid

script=$(basename "$0")

getPid() {
    ### agent_cms has two processes.
    pid1=$(awk '{print $1}' $pidFile 2>/dev/null)
    pid2=$(awk '{print $2}' $pidFile 2>/dev/null)
    ### `$pidFile` may be blank. If the process exists, `! kill -0 $pid 2>/dev/null` will return 1.
    if [[ ! "$pid1" && ! "$pid2" ]] || ! kill -0 $pid1 2>/dev/null && ! kill -0 $pid2 2>/dev/null; then
        rm -f $pidFile
        unset pid1 pid2
    fi
}

doStart() {
    echo -en "\033[1;36m[I]\033[0m  Starting $name"
    if $bin -d -t "$token" > /dev/null; then
        echo -n '.'
        sleep 1
    else
        echo -e "\n\033[1;31m[E]\033[0m  Start $name error."
        exit 1
    fi

    until [[ "$pid1" && "$pid2" ]]; do
        pids=$(pgrep -f $bin)
        if [ ! "$pids" ]; then
            echo -e "\n\033[1;31m[E]\033[0m  Start $name failed."
            exit 1
        fi
        pid1=$(echo $pids | awk '{print $1}')
        pid2=$(echo $pids | awk '{print $2}')

        echo -n '.'
        sleep 1
    done

    echo -n $pids > $pidFile
    echo -e "\n\033[1;32m[N]\033[0m  Start $name success."
}


doStop() {
    echo -en "\033[1;36m[I]\033[0m  Stopping $name"
    if kill -9 $pid1 2>/dev/null; then
        echo -n '.'
    else
        echo -e "\n\033[1;31m[E]\033[0m  Stop $name error."
        exit 1
    fi

    ### Successfully stop the program if the process doesn't exists in 10 seconds.
    for (( i=0; i<=10; i++ )); do
        if kill -0 $pid1 2>/dev/null || kill -0 $pid2 2>/dev/null; then
            if [ "$i" = "10" ]; then
                echo -e "\n\033[1;31m[E]\033[0m  Stop $name failed."
                exit 1
            fi
            echo -n '.'
            sleep 1
        else
            rm -f $pidFile
            ### Just for restart.
            unset pid1 pid2
            echo -e "\n\033[1;32m[N]\033[0m  Stop $name success."
            break
        fi
    done
}

case "$1" in
    start)
    getPid
    if [[ "$pid1" && "$pid2" ]]; then
        echo -e "\033[1;33m[W]\033[0m  $name is already running. pid1 = $pid1, pid2 = $pid2."
    else
        doStart
    fi
    ;;

    stop)
    getPid
    if [[ "$pid1" && "$pid2" ]]; then
        doStop
    else
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
    fi
    ;;

    restart)
    getPid
    if [[ "$pid1" && "$pid2" ]]; then
        echo -e "\033[1;36m[I]\033[0m  Restarting $name: "
        doStop
        doStart
    else
        echo -e "\033[1;33m[W]\033[0m  $name isn't running"
        doStart
    fi
    ;;

    status)
    getPid
    if [[ "$pid1" && "$pid2" ]]; then
        echo -e "\033[1;32m[N]\033[0m  $name is running. pid1 = $pid1, pid2 = $pid2."
    else
        echo -e "\033[1;32m[N]\033[0m  $name isn't running."
        exit 3
    fi
    ;;

    *)
    echo "Usage: [sudo] $script {start|stop|restart|status}." >&2
    exit 3
    ;;
esac

exit 0
