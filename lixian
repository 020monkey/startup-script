#! /bin/bash

### BEGIN INIT INFO
# Provides: lixian
# Required-Start: $local_fs $network $remote_fs $syslog
# Required-Stop: $local_fs $network $remote_fs $syslog
# Should-Start: network-manager
# Should-Stop: network-manager
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: sinosky lixian server daemon
# Description: xunlei lixian api & a website project base on it & a plugin for flexget.
### END INIT INFO

PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:~/bin
export PATH

if [ "$(id -u)" != "0" ]; then
    echo -e "\033[1;31m[E]\033[0m  You must have root permissions for run this script, please use sudo and try again."
    exit 3
fi

### Maybe you need to change these.
name=lixian
### lixian need python2 to run it.
### In the most cases, the binary file of programs are in `/usr/bin` or `/usr/local/bin`.
### Try use `which $name` to find the full path, or just use `$name` if the binary file in `$PATH`.
python2=/usr/local/bin/python2
### Edit this to your own path.
app=/home/www/root/$name/main.py
### In the most cases, the configuration file of programs are in `/etc`. You can create your own configuration file and edit this to the new path.
config=/home/www/etc/$name.conf
### In the most cases, the log file of programs are in `/var/log`. You are free to change this.
log=/home/www/log/$name.app.log
### By default, the pid file of programs are in `/var/run`. So you don't need to change this.
pidFile=/var/run/$name.pid

getPid() {
    ### Delete spaces, tabs and newlines.
    pid=$(cat $pidFile 2>/dev/null | tr -d ' \t\n')
    if [ "$pid" ] && [ ! -d "/proc/$pid" ]; then
        rm -f $pidFile
        unset pid
    fi
}

### Successfully start the application if the progress exists after 5 seconds.
doStart() {
    echo -en "\033[1;36m[I]\033[0m  Starting $name"
    nohup $python2 $app --f="$config" >> "$log" 2>&1 & echo -n $! > $pidFile

    pid=$!
    for (( i=0; i<=5; i++ )); do
        if [ -d "/proc/$pid" ]; then
            echo -n '.'
            sleep 1
        else
            rm -f $pidFile
            echo -e "\n\033[1;31m[E]\033[0m  Start $name failed."
            exit 1
        fi
    done
    echo -e "\n\033[1;32m[N]\033[0m  Start $name succeeded."
}

### Successfully stop the application if the progress doesn't exists in 10 seconds.
doStop() {
    echo -en "\033[1;36m[I]\033[0m  Stopping $name"
    kill $pid

    for (( i=0; i<=10; i++ )); do
        if [ -d "/proc/$pid" ]; then
            if [ "$i" = "10" ]; then
                echo -e "\n\033[1;31m[E]\033[0m  Stop $name failed. Try using $0 kill."
                exit 1
            fi
            echo -n '.'
            sleep 1
        else
            rm -f $pidFile
            ### Just for restart.
            unset pid
            echo -e "\n\033[1;32m[N]\033[0m  Stop $name succeeded."
            break
        fi
    done
}

case "$1" in
    start)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;33m[W]\033[0m  $name already running. pid = $pid"
        exit 2
    else
        doStart
    fi
    ;;

    stop)
    getPid
    if [ "$pid" ]; then
        doStop
    else
        echo -e "\033[1;33m[W]\033[0m  $name not running."
        exit 2
    fi
    ;;

    kill)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;36m[I]\033[0m  Forcefully killing the progress of $name..."
        kill -9 $pid
        rm -f $pidFile
        echo -e "\033[1;32m[N]\033[0m  Kill $name Done."
    else
        echo -e "\033[1;33m[W]\033[0m  $name not running."
        exit 2
    fi
    ;;

    restart)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;36m[I]\033[0m  Restarting $name: "
        doStop
        doStart
    else
        echo -e "\033[1;33m[W]\033[0m  $name not running"
        doStart
    fi
    ;;

    status)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;32m[N]\033[0m  $name is running. pid = $pid"
    else
        echo -e "\033[1;32m[N]\033[0m  $name not running."
    fi
    ;;

    *)
    script=$(basename "$0")
    echo "Usage: [sudo] $script {start|stop|kill|restart|status}." >&2
    exit 3
    ;;
esac

exit 0
