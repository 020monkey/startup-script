#!/bin/bash

### BEGIN INIT INFO
# Provides:          munin
# Required-Start:    $local_fs $network $named $remote_fs $syslog
# Required-Stop:     $local_fs $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: munin daemon
# Description:       Munin is a free and open-source computer system monitoring, network monitoring and infrastructure monitoring software application.
### END INIT INFO

PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin
export PATH

if [ $(id -u) -ne 0 ]; then
    echo -e "\033[1;31m[E]\033[0m  You must have root permissions for run this script, please use sudo and try again." >&2
    exit 4
fi

name=munin

###############################################################
########## Maybe you need to modify these variables. ##########

### In the most cases, the binary file of program is in `/usr/bin` or `/usr/local/bin`.
### Try using `which munin-node` `which munin-cgi-graph` `which munin-cgi-html` and `which spawn-fcgi` to find the full path, or just use `munin-node` `munin-cgi-graph` `munin-cgi-html` and `spawn-fcgi` if it is in `$PATH`.
prefix=/usr/local/munin
node=$prefix/sbin/munin-node
cgiGraph=$prefix/lib/cgi/munin-cgi-graph
cgiHtml=$prefix/lib/cgi/munin-cgi-html
spawnFcgi=/usr/bin/spawn-fcgi
if [ ! -x "$node" ] || [ ! -x "$cgiGraph" ] || [ ! -x "$cgiHtml" ] || [ ! -x "$spawnFcgi" ]; then
    echo -e "\033[1;31m[E]\033[0m  Can not find $node $cgiGraph $cgiHtml or $spawnFcgi, maybe the program isn't installed." >&2
    exit 5
fi

### In the most cases, the configuration file of program is in `/etc`. You can create your own configuration file and edit this variable to the new path.
config=/data/etc/munin/munin-node.conf
if [ ! -r "$config" ]; then
    echo -e "\033[1;31m[E]\033[0m  The configuration file isn't found, maybe the path ($config) is wrong." >&2
    exit 6
fi

### By default, the pid file of program is in `/var/run`. So you don't need to edit this variable.
pidDir=/var/run/munin
nodePidFile=$pidDir/munin-node.pid
cgiGraphPidFile=$pidDir/munin-cgi-graph.pid
cgiHtmlPidFile=$pidDir/munin-cgi-html.pid

socketDir=/tmp/munin
cgiGraphSocketFile=$socketDir/munin-cgi-graph.sock
cgiHtmlSocketFile=$socketDir/munin-cgi-html.sock

cgiForkChildrenNum=3

##########                                           ##########
###############################################################

script=$(basename "$0")

getPid() {
    ### Delete spaces, tabs and newlines.
    nodePid=$(cat $nodePidFile 2>/dev/null | tr -d ' \t\n')

    ### `$nodePidFile` may be blank. If the process exists, `! kill -0 $nodePid 2>/dev/null` will return 1.
    if [ -z $nodePid ] || ! kill -0 $nodePid 2>/dev/null; then
        rm -f $nodePidFile
        unset nodePid
    fi

    unset cgiHtmlPids cgiGraphPids

    i=0
    while read line; do
        line=$(echo -n "$line" | tr -d ' \t\n')

        if [ -z $line ] || ! kill -0 $line 2>/dev/null; then
            continue
        fi

        cgiGraphPids[$i]=$line

        (( i++ ))
    done < <(awk 1 $cgiGraphPidFile 2>/dev/null)

    if [ ${#cgiGraphPids[*]} -eq 0 ]; then
        rm -f $cgiGraphPidFile
    fi

    i=0
    while read line; do
        line=$(echo -n "$line" | tr -d ' \t\n')

        if [ -z $line ] || ! kill -0 $line 2>/dev/null; then
            continue
        fi

        cgiHtmlPids[$i]=$line

        (( i++ ))
    done < <(awk 1 $cgiHtmlPidFile 2>/dev/null)

    if [ ${#cgiHtmlPids[*]} -eq 0 ]; then
        rm -f $cgiHtmlPidFile
    fi
}

doStart() {
    echo -en "\033[1;36m[I]\033[0m  Starting $name"

    if [ ! -d "$pidDir" ]; then
        mkdir -p $pidDir
        chown -R munin:munin $pidDir
    fi

    if [ ! -d "$socketDir" ]; then
        mkdir -p $socketDir
        chown -R munin:munin $socketDir
    fi

    if ! $node --config "$config"; then
        echo -e "\n\033[1;31m[E]\033[0m  Start munin-node error."
        exit 1
    fi

    ### WARNING: You can't specify a config file for munin-cgi. You must install munin from source if you want to use a custom config file.
    if ! $spawnFcgi -F $cgiForkChildrenNum -s $cgiGraphSocketFile -u munin -g munin -U munin -G munin -P $cgiGraphPidFile $cgiGraph; then
        echo -e "\n\033[1;31m[E]\033[0m  Start munin-cgi-graph error."
        exit 1
    fi

    if ! $spawnFcgi -F $cgiForkChildrenNum -s $cgiHtmlSocketFile -u munin -g munin -U munin -G munin -P $cgiHtmlPidFile $cgiHtml; then
        echo -e "\n\033[1;31m[E]\033[0m  Start munin-cgi-html error."
        exit 1
    fi

    echo -n '.'
    getPid

    ### Successfully start the program if the process exists after 5 seconds.
    for (( i=0; i<=5; i++ )); do
        if ! kill -0 $nodePid 2>/dev/null; then
            echo -e "\n\033[1;31m[E]\033[0m  Start munin-node failed."
            exit 1
        fi

        if [ ${#cgiGraphPids[*]} -eq 0 ]; then
            echo -e "\n\033[1;33m[W]\033[0m  Start munin-cgi-graph failed."
        fi

        for cgiGraphPid in ${cgiGraphPids[*]}; do
            if ! kill -0 $cgiGraphPid 2>/dev/null; then
                echo -e "\n\033[1;31m[E]\033[0m  Start munin-cgi-graph failed."
                exit 1
            fi
        done

        if [ ${#cgiHtmlPids[*]} -eq 0 ]; then
            echo -e "\n\033[1;31m[E]\033[0m  Start munin-cgi-html failed."
        fi

        for cgiHtmlPid in ${cgiHtmlPids[*]}; do
            if ! kill -0 $cgiHtmlPid 2>/dev/null; then
                echo -e "\n\033[1;31m[E]\033[0m  Start munin-cgi-html failed."
                exit 1
            fi
        done

        echo -n '.'
        sleep 1
    done

    echo -e "\n\033[1;32m[N]\033[0m  Start $name success."
}

doStop() {
    echo -en "\033[1;36m[I]\033[0m  Stopping $name"
    if ! kill $nodePid 2>/dev/null; then
        echo -e "\n\033[1;31m[E]\033[0m  Stop munin-node error. Try using $script kill."
        exit 1
    fi

    for cgiGraphPid in ${cgiGraphPids[*]}; do
        if ! kill $cgiGraphPid; then
            echo -e "\n\033[1;31m[E]\033[0m  Stop munin-cgi-graph error. Try using $script kill."
            exit 1
        fi
    done

    for cgiHtmlPid in ${cgiHtmlPids[*]}; do
        if ! kill $cgiHtmlPid; then
            echo -e "\n\033[1;31m[E]\033[0m  Stop munin-cgi-html error. Try using $script kill."
            exit 1
        fi
    done

    ### Successfully stop the program if the process doesn't exists in 10 seconds.
    for (( i=0; i<=11; i++ )); do
        echo -n '.'
        sleep 1

        if kill -0 $nodePid 2>/dev/null; then
            if [ $i -ge 10 ]; then
                echo -e "\n\033[1;31m[E]\033[0m  Stop munin-node failed. Try using $script kill."
                exit 1
            fi

            continue
        fi

        for cgiGraphPid in ${cgiGraphPids[*]}; do
            if kill -0 $cgiGraphPid 2>/dev/null; then
                if [ $i -ge 10 ]; then
                    echo -e "\n\033[1;31m[E]\033[0m  Stop munin-cgi-graph failed. Try using $script kill."
                    exit 1
                fi

                continue
            fi
        done

        for cgiHtmlPid in ${cgiHtmlPids[*]}; do
            if kill -0 $cgiHtmlPid 2>/dev/null; then
                if [ $i -ge 10 ]; then
                    echo -e "\n\033[1;31m[E]\033[0m  Stop munin-html-graph failed. Try using $script kill."
                    exit 1
                fi

                continue
            fi
        done

        echo -e "\n\033[1;32m[N]\033[0m  Stop $name success."
        break
    done
}

case "$1" in
    start)
    getPid
    if [ $nodePid ] || [ ${#cgiGraphPids[*]} -gt 0 ] || [ ${#cgiHtmlPids[*]} -gt 0 ]; then
        echo -e "\033[1;33m[W]\033[0m  $name is already running:"

        if [ $nodePid ]; then
            echo -e "\033[1;33m[W]\033[0m  munin-node pid = $nodePid."
        fi

        if [ ${#cgiGraphPids[*]} -gt 0 ]; then
            echo -e "\033[1;33m[W]\033[0m  munin-cgi-graph pids are ${cgiGraphPids[*]}."
        fi

        if [ ${#cgiHtmlPids[*]} -gt 0 ]; then
            echo -e "\033[1;33m[W]\033[0m  munin-cgi-html pids are ${cgiHtmlPids[*]}."
        fi
    fi

    doStart
    ;;

    stop)
    getPid
    if [ -z $nodePid ] && [ ${#cgiGraphPids[*]} -eq 0 ] && [ ${#cgiHtmlPids[*]} -eq 0 ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
        exit 0
    fi

    doStop
    ;;

    kill)
    getPid
    if [ -z $nodePid ] && [ ${#cgiGraphPids[*]} -eq 0 ] && [ ${#cgiHtmlPids[*]} -eq 0 ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
        exit 0
    fi

    echo -e "\033[1;36m[I]\033[0m  Forcefully killing the process of $name..."

    if ! kill -9 $nodePid 2>/dev/null; then
        echo -e "\033[1;31m[E]\033[0m  Kill munin-node failed."
        exit 1
    fi
    rm -f $nodePidFile

    for cgiGraphPid in ${cgiGraphPids[*]}; do
        if ! kill -9 $cgiGraphPid 2>/dev/null; then
            echo -e "\033[1;31m[E]\033[0m  Kill munin-cgi-graph failed."
            exit 1
        fi
    done
    rm -f $cgiGraphPidFile

    for cgiHtmlPid in ${cgiHtmlPids[*]}; do
        if ! kill -9 $cgiHtmlPid 2>/dev/null; then
            echo -e "\033[1;31m[E]\033[0m  Kill munin-cgi-html failed."
            exit 1
        fi
    done
    rm -f $cgiHtmlPidFile

    echo -e "\033[1;32m[N]\033[0m  Kill $name done."
    ;;

    restart)
    getPid
    if [ -z $nodePid ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."

        doStart
        exit 0
    fi

    echo -e "\033[1;36m[I]\033[0m  Restarting $name:"

    doStop
    doStart
    ;;

    force-reload)
    getPid
    if [ -z $nodePid ]; then
        echo -e "\033[1;31m[E]\033[0m  $name isn't running."
        exit 7
    fi

    echo -e "\033[1;36m[I]\033[0m  Forcefully reloading (restarting) $name:"
    doStop
    doStart
    ;;

    status)
    getPid
    if [ -z $nodePid ] && [ ${#cgiGraphPids[*]} -eq 0 ] && [ ${#cgiHtmlPids[*]} -eq 0 ]; then
        echo -e "\033[1;32m[N]\033[0m  $name isn't running."
        exit 3
    fi

    echo -e "\033[1;32m[N]\033[0m  $name is already running:"

    if [ $nodePid ]; then
        echo -e "\033[1;32m[N]\033[0m  munin-node pid = $nodePid."
    fi

    if [ ${#cgiGraphPids[*]} -gt 0 ]; then
        echo -e "\033[1;32m[N]\033[0m  munin-cgi-graph pids are ${cgiGraphPids[*]}."
    fi

    if [ ${#cgiHtmlPids[*]} -gt 0 ]; then
        echo -e "\033[1;32m[N]\033[0m  munin-cgi-html pids are ${cgiHtmlPids[*]}."
    fi
    ;;

    *)
    ### You can't reload the configuration file in here.
#   echo "Usage: [sudo] $script {start|stop|kill|restart|force-reload|reload|status}." >&2
    echo "Usage: [sudo] $script {start|stop|kill|restart|force-reload|status}." >&2
    exit 3
    ;;
esac

exit 0
