#!/bin/bash

### BEGIN INIT INFO
# Provides:          ocspd
# Required-Start:    $local_fs $network $named $remote_fs $syslog
# Required-Stop:     $local_fs $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ocsp server
# Description:       r509-ocsp-responder powered by thin.
### END INIT INFO

PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin
export PATH

if [ "$(id -u)" != "0" ]; then
    echo -e "\033[1;31m[E]\033[0m  You must have root permissions for run this script, please use sudo and try again." >&2
    exit 4
fi

name=ocspd

###############################################################
########## Maybe you need to modify these variables. ##########

### In the most cases, the binary file of program is in `/usr/bin` or `/usr/local/bin`.
### Try using `which thin` to find the full path, or just use `thin` if it is in `$PATH`.
bin=/usr/local/bin/thin
if [ ! -x "$bin" ]; then
    echo -e "\033[1;31m[E]\033[0m  Can not find $bin, maybe the program isn't installed." >&2
    exit 5
fi

### In the most cases, the configuration file of program is in `/etc`. You can create your own configuration file and edit this variable to the new path.
config=/data/etc/ocsp.yml
if [ ! -r "$config" ]; then
    echo -e "\033[1;31m[E]\033[0m  The configuration file isn't found, maybe the path ($config) is wrong." >&2
    exit 6
fi

### By default, the pid file of program is in `/var/run`. So you don't need to edit this variable.
pidFolder=/var/run/thin

##########                                           ##########
###############################################################

script=$(basename "$0")

getPid() {
    ### `\d` doesn't work here.
    pidFiles=($(find $pidFolder -regex "$pidFolder/$name\.[0-9]+\.pid" 2>/dev/null))
    pidFilesNum=${#pidFiles[@]}
    ### Maybe $pidFilesNum = 0.
    unset pids
    for (( i=0; i<$pidFilesNum; i++ )); do
        ### `${pidFiles[i]}` may be blank.
        pids[i]=$(cat ${pidFiles[i]} 2>/dev/null | tr -d ' \t\n')
        ### If the process exists, `kill -0 ${pids[i]} 2>/dev/null` will return 0.
        if [ "${pids[i]}" ] && kill -0 ${pids[i]} 2>/dev/null; then
            output+="pid$i = ${pids[i]} "
        else
            rm -f ${pidFiles[i]}
            unset pids[i]
        fi
    done
    pidsNum=${#pids[@]}
}

doStart() {
    echo -en "\033[1;36m[I]\033[0m  Starting $name."
    ### thin doesn't create this folder automatically.
    mkdir -p /tmp/thin
    chown thin:thin /tmp/thin
    ### I don't want it to run as root. But the program may be doesn't have permissions to create the log files or the socket files.
    ### So you need to create them manually, and change owner & group. You can find the paths in the configuration file.
    if su thin -s /bin/bash -c "$bin start -C $config > /dev/null 2>&1"; then
        echo -n '.'
        getPid
        echo -n '.'
    else
        echo -e "\n\033[1;31m[E]\033[0m  Start $name error."
        exit 1
    fi

    if [ "$pidsNum" = "0" ]; then
        echo -e "\n\033[1;31m[E]\033[0m  Start $name failed."
        exit 1
    fi
    echo -e "\n\033[1;32m[N]\033[0m  Start $name success."
}

doStop() {
    echo -en "\033[1;36m[I]\033[0m  Stopping $name."
    if su thin -s /bin/bash -c "$bin stop -C $config > /dev/null 2>&1"; then
        echo -n '.'
    else
        echo -e "\n\033[1;31m[E]\033[0m  Stop $name error."
        exit 1
    fi

    getPid
    echo -n '.'

    if [ "$pidsNum" != "0" ]; then
        echo -e "\n\033[1;31m[E]\033[0m  Stop $name failed."
        exit 1
    fi
    echo -e "\n\033[1;32m[N]\033[0m  Stop $name success."
}

case "$1" in
    start)
    getPid
    if [ "$pidsNum" = "0" ]; then
        doStart
    else
        echo -e "\033[1;33m[W]\033[0m  $name is already running. $output"
    fi
    ;;

    stop)
    getPid
    if [ "$pidsNum" = "0" ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
    else
        doStop
    fi
    ;;

    restart)
    getPid
    if [ "$pidsNum" = "0" ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running"
        doStart
    else
        echo -e "\033[1;36m[I]\033[0m  Restarting $name:"
        doStop
        doStart
    fi
    ;;

    force-reload)
    getPid
    if [ "$pidsNum" = "0" ]; then
        echo -e "\033[1;31m[E]\033[0m  $name isn't running"
        exit 7
    else
        echo -e "\033[1;36m[I]\033[0m  Forcefully reloading (restarting) $name:"
        doStop
        doStart
    fi
    ;;

    status)
    getPid
    if [ "$pidsNum" = "0" ]; then
        echo -e "\033[1;32m[N]\033[0m  $name isn't running."
        exit 3
    else
        echo -e "\033[1;32m[N]\033[0m  $name is running. $output"
    fi
    ;;

    *)
    echo "Usage: [sudo] $script {start|stop|restart|force-reload|status}." >&2
    exit 3
    ;;
esac

exit 0
