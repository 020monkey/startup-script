#!/bin/bash

### BEGIN INIT INFO
# Provides:          redis
# Required-Start:    $local_fs $network $named $remote_fs $syslog
# Required-Stop:     $local_fs $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: redis daemon
# Description:       Redis is an open-source, networked, in-memory, key-value data store with optional durability.
### END INIT INFO

PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin
export PATH

if [ "$(id -u)" != "0" ]; then
    echo -e "\033[1;31m[E]\033[0m  You must have root permissions for run this script, please use sudo and try again." >&2
    exit 4
fi

name=redis

###############################################################
########## Maybe you need to modify these variables. ##########

### In the most cases, the binary file of program is in `/usr/bin` or `/usr/local/bin`.
### Try using `which redis-server` and `which redis-cli` to find the full path, or just use `redis-server` and `redis-cli` if it is in `$PATH`.
bin=/usr/bin/redis-server
cliBin=/usr/bin/redis-cli
if [ ! -x "$bin" ] || [ ! -x "$cliBin" ] ; then
    echo -e "\033[1;31m[E]\033[0m  Can not find $bin or $cliBin, maybe the program isn't installed." >&2
    exit 5
fi

### In the most cases, the configuration file of program is in `/etc`. You can create your own configuration file and edit this variable to the new path.
config=/data/etc/$name.conf
if [ ! -r "$config" ]; then
    echo -e "\033[1;31m[E]\033[0m  The configuration file isn't found, maybe the path ($config) is wrong." >&2
    exit 6
fi

### By default, the pid file of program is in `/var/run`. So you don't need to edit this variable.
### But pay attention to `$name`, it may be different. You can find the path in the configuration file.
pidFile=/var/run/$name.pid

##########                                           ##########
###############################################################

script=$(basename "$0")

getPid() {
    ### Delete spaces, tabs and newlines.
    pid=$(cat $pidFile 2>/dev/null | tr -d ' \t\n')
    ### `$pidFile` may be blank. If the process exists, `! kill -0 $pid 2>/dev/null` will return 1.
    if [ -z "$pid" ] || ! kill -0 $pid 2>/dev/null; then
        rm -f $pidFile
        unset pid
    fi
}

doStart() {
    echo -en "\033[1;36m[I]\033[0m  Starting $name"
    ### I don't want it to run as root. But the program may be doesn't have permissions to create the log file or the database directory.
    ### So you need to create them manually, and change owner & group. You can find the paths in the configuration file.
    if su redis -s /bin/bash -c "$bin '$config'" 2>/dev/null; then
        echo -n '.'
        sleep 1
        getPid
    else
        echo -e "\n\033[1;31m[E]\033[0m  Start $name error."
        exit 1
    fi

    ### Successfully start the program if the process exists after 5 seconds.
    for (( i=0; i<=5; i++ )); do
        if kill -0 $pid 2>/dev/null; then
            echo -n '.'
            sleep 1
        else
            echo -e "\n\033[1;31m[E]\033[0m  Start $name failed."
            exit 1
        fi
    done
    echo -e "\n\033[1;32m[N]\033[0m  Start $name success."
}

doStop() {
    echo -en "\033[1;36m[I]\033[0m  Stopping $name"
    if $cliBin shutdown; then
        echo -n '.'
    else
        echo -e "\n\033[1;31m[E]\033[0m  Stop $name error."
        exit 1
    fi

    ### Successfully stop the program if the process doesn't exists in 10 seconds.
    for (( i=0; i<=10; i++ )); do
        if kill -0 $pid 2>/dev/null; then
            echo -n '.'
            sleep 1
        else
            echo -e "\n\033[1;32m[N]\033[0m  Stop $name success."
            return 0
        fi
    done

    echo -e "\n\033[1;31m[E]\033[0m  Stop $name failed."
    exit 1
}

case "$1" in
    start)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;33m[W]\033[0m  $name is already running. pid = $pid"
    else
        doStart
    fi
    ;;

    stop)
    getPid
    if [ "$pid" ]; then
        doStop
    else
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
    fi
    ;;

    restart)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;36m[I]\033[0m  Restarting $name:"
        doStop
        doStart
    else
        echo -e "\033[1;33m[W]\033[0m  $name isn't running"
        doStart
    fi
    ;;

    force-reload)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;36m[I]\033[0m  Forcefully reloading (restarting) $name:"
        doStop
        doStart
    else
        echo -e "\033[1;31m[E]\033[0m  $name isn't running"
        exit 7
    fi
    ;;

    status)
    getPid
    if [ "$pid" ]; then
        echo -e "\033[1;32m[N]\033[0m  $name is running. pid = $pid"
    else
        echo -e "\033[1;32m[N]\033[0m  $name isn't running."
        exit 3
    fi
    ;;

    *)
    ### You can't reload the configuration file in here,
    ### but you can use the `CONFIG SET` command which is used in order to reconfigure the server at run time without the need to restart Redis.
    ### See http://redis.io/commands/config-set.
    ### You also can't forcefully kill redis-server, it's not safe.
#   echo "Usage: [sudo] $script {start|stop|kill|restart|force-reload|reload|status}" >&2
    echo "Usage: [sudo] $script {start|stop|restart|force-reload|status}." >&2
    exit 3
    ;;
esac

exit 0
