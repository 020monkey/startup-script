#!/bin/bash

### BEGIN INIT INFO
# Provides:          lixian
# Required-Start:    $local_fs $network $named $remote_fs $syslog mysqld
# Required-Stop:     $local_fs $network $named $remote_fs $syslog mysqld
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: sinosky lixian server daemon
# Description:       xunlei lixian api & a website project base on it & a plugin for flexget.
### END INIT INFO

PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin
export PATH

if [ $(id -u) -ne 0 ]; then
    echo -e "\033[1;31m[E]\033[0m  You must have root permissions for run this script, please use sudo and try again." >&2
    exit 4
fi

name=lixian

###############################################################
########## Maybe you need to modify these variables. ##########

### lixian need python 2 to run it.
### In the most cases, the binary file of program is in `/usr/bin` or `/usr/local/bin`.
### Try using `which python2.7` to find the full path, or just use `$name` if the binary file is in `$PATH`.
python27=$(which python2.7)
if [ ! -x "$python27" ]; then
    echo -e "\033[1;31m[E]\033[0m  Can not find python, Try using 'which python2' or 'which python' to find it." >&2
    exit 5
fi

### Edit this variable to your own path.
app=/data/root/$name/main.py
if [ ! -r "$app" ]; then
    echo -e "\033[1;31m[E]\033[0m  Can not find $app, please edit the path to your own and and try again." >&2
    exit 5
fi

### In the most cases, the configuration file of program is in `/etc`. You can create your own configuration file and edit this variable to the new path.
config=/data/etc/$name.conf
if [ ! -r "$config" ]; then
    echo -e "\033[1;31m[E]\033[0m  The configuration file isn't found, maybe the path ($config) is wrong." >&2
    exit 6
fi

### In the most cases, the log file of program is in `/var/log`. You are free to modify this variable.
log=/data/log/$name.app.log

### By default, the pid file of program is in `/var/run`. So you don't need to modify this variable.
pidFile=/var/run/$name.pid

##########                                           ##########
###############################################################

script=$(basename "$0")

getPid() {
    ### Delete spaces, tabs and newlines.
    pid=$(cat $pidFile 2>/dev/null | tr -d ' \t\n')

    ### `$pidFile` may be blank. If the process exists, `! kill -0 $pid 2>/dev/null` will return 1.
    if [ -z $pid ] || ! kill -0 $pid 2>/dev/null; then
        rm -f $pidFile
        unset pid
    fi
}

doStart() {
    echo -en "\033[1;36m[I]\033[0m  Starting $name."

    if [ ! -f "$log" ]; then
        touch "$log"
        chown lixian:lixian "$log"
    fi

    ### I don't want it to run as root. But the program may be doesn't have permissions to create the log file or the database file.
    ### So you need to create them manually, and change owner & group. You can find the paths in the configuration file.
    if ! su lixian -s /bin/bash -c "nohup $python27 $app --f='$config' >> '$log' 2>&1 &"; then
        echo -e "\n\033[1;31m[E]\033[0m  Start $name error."
        exit 1
    fi

    pid=$(pgrep -f $app)
    echo -n $pid > $pidFile

    ### Successfully start the program if the process exists after 5 seconds.
    for (( i=0; i<=5; i++ )); do
        if ! kill -0 $pid 2>/dev/null; then
            rm -f $pidFile
            echo -e "\n\033[1;31m[E]\033[0m  Start $name failed."
            exit 1
        fi

        sleep 1
        echo -n '.'
    done

    echo -e "\n\033[1;32m[N]\033[0m  Start $name success."
}

doStop() {
    echo -en "\033[1;36m[I]\033[0m  Stopping $name."

    if ! kill $pid; then
        echo -e "\n\033[1;31m[E]\033[0m  Stop $name error. Try using $script kill."
        exit 1
    fi

    ### Successfully stop the program if the process doesn't exists in 10 seconds.
    for (( i=0; i<=10; i++ )); do
        if ! kill -0 $pid 2>/dev/null; then
            rm -f $pidFile
            echo -e "\n\033[1;32m[N]\033[0m  Stop $name success."
            return 0
        fi

        sleep 1
        echo -n '.'
    done

    echo -e "\n\033[1;31m[E]\033[0m  Stop $name failed. Try using $script kill."
    exit 1
}

case "$1" in
    start)
    getPid
    if [ $pid ]; then
        echo -e "\033[1;33m[W]\033[0m  $name is already running. pid = $pid."
        exit 0
    fi

    doStart
    ;;

    stop)
    getPid
    if [ -z $pid ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
        exit 0
    fi

    doStop
    ;;

    kill)
    getPid
    if [ -z $pid ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
        exit 0
    fi

    echo -e "\033[1;36m[I]\033[0m  Forcefully killing the process of $name..."

    if ! kill -9 $pid; then
        echo -e "\033[1;31m[E]\033[0m  Kill $name error."
        exit 1
    fi

    rm -f $pidFile
    echo -e "\033[1;32m[N]\033[0m  Kill $name done."
    ;;

    restart)
    getPid
    if [ -z $pid ]; then
        echo -e "\033[1;33m[W]\033[0m  $name isn't running."
        doStart
        exit 0
    fi

    echo -e "\033[1;36m[I]\033[0m  Restarting $name:"
    doStop
    doStart
    ;;

    force-reload)
    getPid
    if [ -z $pid ]; then
        echo -e "\033[1;31m[E]\033[0m  $name isn't running."
        exit 7
    fi

    echo -e "\033[1;36m[I]\033[0m  Forcefully reloading (restarting) $name:"
    doStop
    doStart
    ;;

    status)
    getPid
    if [ -z $pid ]; then
        echo -e "\033[1;32m[N]\033[0m  $name isn't running."
        exit 3
    fi

    echo -e "\033[1;32m[N]\033[0m  $name is running. pid = $pid."
    ;;

    *)
    echo "Usage: [sudo] $script {start|stop|kill|restart|force-reload|status}." >&2
    exit 3
    ;;
esac

exit 0
